kind: InitConfiguration
apiVersion: kubeadm.k8s.io/v1beta4
bootstrapTokens: # Токен для сборки кластера
  - token: "join01.3f89s0fje9f38fhf"
    description: "join bootstrap token"
    ttl: "24h"
    usages:
      - authentication
      - signing
    groups:
      - system:bootstrappers:kubeadm:default-node-token
localAPIEndpoint: # Локальная конечная точка API
  advertiseAddress: ADVERTISE_ADDRESS
  bindPort: 6443
certificateKey: CERTIFICATE_KEY
skipPhases:
#  - preflight
#  - certs
#  - certs/apiserver
#  - certs/apiserver-kubelet-client
#  - certs/front-proxy-ca
#  - certs/front-proxy-client
#  - certs/etcd-ca
#  - certs/etcd-server
#  - certs/etcd-peer
#  - certs/etcd-healthcheck-client
#  - certs/apiserver-etcd-client
#  - certs/sa
#  - kubeconfig
#  - kubeconfig/admin
#  - kubeconfig/super-admin
#  - kubeconfig/kubelet
#  - kubeconfig/controller-manager
#  - kubeconfig/scheduler
#  - etcd
#  - etcd/local
#  - control-plane
#  - control-plane/apiserver
#  - control-plane/controller-manager
#  - control-plane/scheduler
#  - kubelet-start
#  - upload-config
#  - upload-certs
#  - mark-control-plane
#  - bootstrap-token
#  - kubelet-finalize
#  - addon
#  - show-join-command
nodeRegistration: #содержит поля, которые относятся к регистрации нового узла плоскости управления в кластере
  # Выбор механизма управления контейнерами (containerd, CRI-O, OCI ...)
  criSocket: unix:///var/run/containerd/containerd.sock
  # Политика извлечения образа. Без указания логика следующая:
  # Если тег образа — :latest или если тег пропущен - Always
  # Иначе IfNotPresent
  imagePullPolicy: IfNotPresent
  # Параллельное извлечение образов
  imagePullSerial: true
  # Имя ноды. Без указания имя будет имя хоста. Это поле также используется в CommonName поле клиентского сертификата kubelet для сервера API
#  name: node
  taints: []
  # Аргументы запуска kubelet
  # https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/
#  kubeletExtraArgs:
#    - key: failSwapOn
#      value: "false"
  # Список игнорируемых ошибок
#  ignorePreflightErrors:
#    - swap
#    - IsPrivilegedUser
#    - all
timeouts:
  controlPlaneComponentHealthCheck: 4m0s
  discovery: 5m0s
  etcdAPICall: 2m0s
  kubeletHealthCheck: 4m0s
  kubernetesAPICall: 1m0s
  tlsBootstrap: 5m0s
  upgradeManifests: 5m0s
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
enableServer: true
failSwapOn: false
cgroupDriver: "systemd"
featureGates:
  NodeSwap: true
memorySwap:
  swapBehavior: LimitedSwap
logging:
  format: "json"
enableSystemLogHandler: true
enableSystemLogQuery: true
---
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta4
kubernetesVersion: 1.31.0
clusterName: kubernetes
certificatesDir: /etc/kubernetes/pki
caCertificateValidityPeriod: 87600h0m0s
certificateValidityPeriod: 8760h0m0s
encryptionAlgorithm: RSA-2048
controlPlaneEndpoint: "192.168.2.2:6444"
etcd:
  external:
    endpoints:
      - "https://192.168.2.2:2381"
    caFile: "/etc/ssl/etcd/ca_etcd.pem"
    certFile: "/etc/ssl/etcd/client.pem"
    keyFile: "/etc/ssl/etcd/client-key.pem"
dns: {}
apiServer:
#  extraArgs:
#    - name: audit-log-path
#      value: "/logs/"
#  extraVolumes:
#    - name: "logs"
#      hostPath: "/tmp/logs/apiServer"
#      mountPath: "/logs/"
#      readOnly: false
#      pathType: File
  certSANs:
    - "192.168.2.2"
controllerManager:
  extraArgs:
    - name: bind-address
      value: "0.0.0.0"
    - name: configure-cloud-routes
      value: "false"
    - name: cloud-provider
      value: ""
#    - name: v
#      value: "5"
#  extraVolumes:
#    - name: "tmp-volume"
#      hostPath: "/tmp/volume"
#      mountPath: "/tmp/volume"
#      readOnly: false
#      pathType: File
scheduler:
  extraArgs:
    - name: bind-address
      value: "0.0.0.0"
#    - name: v
#      value: "5"
#dns:
#  disabled: true  # disable CoreDNS
#  extraVolumes:
#    - name: "tmp-volume"
#      hostPath: "/tmp/volume"
#      mountPath: "/tmp/volume"
#      readOnly: false
#      pathType: File
imageRepository: registry.k8s.io
networking:
  serviceSubnet: "192.170.0.0/23"
  podSubnet: "192.180.0.0/23"
  dnsDomain: "fzen.pro"
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
metricsBindAddress: "0.0.0.0:10249"
---
kind: ResetConfiguration
apiVersion: kubeadm.k8s.io/v1beta4
force: true
certificatesDir: /etc/kubernetes/pki
criSocket: unix:///var/run/containerd/containerd.sock
timeouts:
  controlPlaneComponentHealthCheck: 4m0s
  discovery: 5m0s
  etcdAPICall: 2m0s
  kubeletHealthCheck: 4m0s
  kubernetesAPICall: 1m0s
  tlsBootstrap: 5m0s
  upgradeManifests: 5m0s
